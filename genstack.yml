---
version: '3'
volumes:
    local_postgres_data: {}
    local_postgres_data_backups: {}
    local_zookeeper_data: {}
    local_kafka_data: {}
services:
    sso.local.redhat.com:
        container_name: sso.local.redhat.com
        image: quay.io/keycloak/keycloak:11.0.0
        environment:
            DB_VENDOR: h2
            PROXY_ADDRESS_FORWARDING: 'true'
            KEYCLOAK_USER: admin
            KEYCLOAK_PASSWORD: password
        expose:
            - 8443
    kcadmin:
        container_name: kcadmin
        image: python:3
        build:
            context: srv/keycloak_admin
        volumes:
            - ./srv/keycloak_admin:/app
        depends_on:
            - sso.local.redhat.com
        command: /bin/bash -c "cd /app && pip install -r requirements.txt && python -c 'from kchelper import init_realm; init_realm()' && flask run --host=0.0.0.0 --port=80"
    webroot:
        container_name: webroot
        image: nginx
        volumes:
            - ./srv/www:/usr/share/nginx/html
            - ./srv/nginx.conf.d:/etc/nginx/conf.d
            - ./srv/insights-chrome/build:/usr/share/nginx/html/apps/chrome
            - ./srv/landing-page-frontend/dist:/usr/share/nginx/html/apps/landing
        command:
            - nginx-debug
            - -g
            - daemon off;
    entitlements:
        container_name: entitlements
        image: python:3
        build:
            context: srv/entitlements
        volumes:
            - ./srv/entitlements:/app
        command: /bin/bash -c "cd /app && pip install -r requirements.txt && python api.py"
    rbac:
        container_name: rbac
        image: python:3
        build:
            context: srv/rbac
        volumes:
            - ./srv/rbac:/app
        command: /bin/bash -c "cd /app && pip install -r requirements.txt && python api.py"
    tower-analytics-frontend:
        container_name: aafrontend
        image: noderunner:latest
        build:
            context: ./srv/tower-analytics-frontend
            dockerfile: Dockerfile
        user: node
        ports:
            - 8002:8002
        environment:
            DEBUG: express:*
        command: /bin/bash -c "cd /app && npm install && npm run start:container"
        volumes:
            - ./srv/tower-analytics-frontend:/app:rw
    squid:
        container_name: squid
        image: datadog/squid
        ports:
            - 3128:3128
        volumes:
            - ./srv/squid/conf:/etc/squid
            - ./srv/squid/logs:/var/log/squid
    prod.foo.redhat.com:
        container_name: prod.foo.redhat.com
        image: redhatinsights/insights-proxy
        ports:
            - 8443:8443
        environment:
            SPANDX_PORT: 8443
        security_opt:
            - label=disable
        extra_hosts:
            - prod.foo.redhat.com:127.0.0.1
        volumes:
            - ./srv/www/spandx.config.js:/config/spandx.config.js
    fastapi:
        build:
            context: ./srv/tower-analytics-backend
            dockerfile: ./Dockerfile
            args:
                SRC_MOUNT: /app
        image: tower_analytics_backend
        depends_on:
            - postgres
        volumes:
            - ./srv/tower-analytics-backend/:/app
        env_file:
            - ./srv/tower-analytics-backend/.envs/.local/.django
            - ./srv/tower-analytics-backend/.envs/.local/.postgres
        ports:
            - 8004:8080
        command: ./launcher
        environment:
            - ALLOW_DIRECT_BUNDLE_UPLOADS=yes
            - DEBUG=true
            - APP=fastapi
            - DEV=1
        container_name: fastapi
    postgres:
        build:
            context: ./srv/tower-analytics-backend
            dockerfile: ./compose/local/postgres/Dockerfile
        ports:
            - 15432:5432
        image: tower_analytics_backend_production_postgres
        volumes:
            - ./srv/tower-analytics-backend/local_postgres_data:/var/lib/postgresql/data
            - ./srv/tower-analytics-backend/local_postgres_data_backups:/backups
        env_file:
            - ./srv/tower-analytics-backend/.envs/.local/.postgres
        container_name: postgres
    kafka:
        image: bitnami/kafka:2
        ports:
            - 9092:9092
        volumes:
            - local_kafka_data:/bitnami
        environment:
            - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
            - ALLOW_PLAINTEXT_LISTENER=yes
            - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
        depends_on:
            - zookeeper
        container_name: kafka
    zookeeper:
        image: bitnami/zookeeper:3
        ports:
            - 2181:2181
        volumes:
            - local_zookeeper_data:/bitnami
        environment:
            - ALLOW_ANONYMOUS_LOGIN=yes
        container_name: zookeeper
    refresher:
        image: tower_analytics_backend
        depends_on:
            - postgres
        volumes:
            - ./srv/tower-analytics-backend/:/app
        env_file:
            - ./srv/tower-analytics-backend/.envs/.local/.django
            - ./srv/tower-analytics-backend/.envs/.local/.postgres
        command: ./launcher
        environment:
            - APP=refresher
        container_name: refresher
    rollups_processor:
        image: tower_analytics_backend
        depends_on:
            - postgres
            - kafka
        volumes:
            - ./srv/tower-analytics-backend/:/app
        env_file:
            - ./srv/tower-analytics-backend/.envs/.local/.django
            - ./srv/tower-analytics-backend/.envs/.local/.postgres
            - ./srv/tower-analytics-backend/.envs/.local/.kafka
        command: ./launcher
        environment:
            - APP=rollups
        container_name: rollups_processor
networks:
    default:
        external:
            name: awxcompose_default
