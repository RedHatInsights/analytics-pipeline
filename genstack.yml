---
version: '3'
networks:
    ssonet:
        ipam:
            config:
                - subnet: 172.23.0.0/24
services:
    kcpostgres:
        container_name: kcpostgres
        image: postgres:12.2
        environment:
            POSTGRES_DB: keycloak
            POSTGRES_USER: keycloak
            POSTGRES_PASSWORD: keycloak
        networks:
            ssonet:
                ipv4_address: 172.23.0.2
    sso.local.redhat.com:
        container_name: sso.local.redhat.com
        image: quay.io/keycloak/keycloak:11.0.0
        environment:
            DB_VENDOR: postgres
            DB_ADDR: kcpostgres
            DB_DATABASE: keycloak
            DB_USER: keycloak
            DB_PASSWORD: keycloak
            PROXY_ADDRESS_FORWARDING: 'true'
            KEYCLOAK_USER: admin
            KEYCLOAK_PASSWORD: password
        ports:
            - 8443:8443
        depends_on:
            - kcpostgres
        networks:
            ssonet:
                ipv4_address: 172.23.0.3
    kcadmin:
        container_name: kcadmin
        image: python:3
        build:
            context: srv/keycloak_admin
        volumes:
            - ./srv/keycloak_admin:/app
        depends_on:
            - sso.local.redhat.com
        command: /bin/bash -c "cd /app && pip install -r requirements.txt && python -c 'from kchelper import init_realm; init_realm()' && flask run --host=0.0.0.0 --port=80"
        networks:
            ssonet:
                ipv4_address: 172.23.0.4
    insights_proxy:
        container_name: insights_proxy
        image: redhatinsights/insights-proxy
        ports:
            - 1337:1337
        environment:
            - PLATFORM=linux
            - CUSTOM_CONF=true
        security_opt:
            - label=disable
        extra_hosts:
            - prod.foo.redhat.com:127.0.0.1
        volumes:
            - ./srv/www/spandx.config.js:/config/spandx.config.js
    webroot:
        container_name: webroot
        image: nginx
        volumes:
            - ./srv/www:/usr/share/nginx/html
        command:
            - nginx-debug
            - -g
            - daemon off;
    chrome:
        container_name: chrome
        image: nginx
        volumes:
            - ./srv/insights-chrome:/usr/share/nginx/html
        command:
            - nginx-debug
            - -g
            - daemon off;
    chrome_beta:
        container_name: chrome_beta
        image: nginx
        volumes:
            - ./srv/insights-chrome:/usr/share/nginx/html
        command:
            - nginx-debug
            - -g
            - daemon off;
    landing:
        container_name: landing
        image: nginx
        volumes:
            - ./srv/landing-page-frontend/dist:/usr/share/nginx/html/apps/landing
        command:
            - nginx-debug
            - -g
            - daemon off;
    landing_beta:
        container_name: landing_beta
        image: nginx
        volumes:
            - ./srv/landing-page-frontend/dist:/usr/share/nginx/html/beta/apps/landing
        command:
            - nginx-debug
            - -g
            - daemon off;
    entitlements:
        container_name: entitlements
        image: python:3
        build:
            context: srv/entitlements
        volumes:
            - ./srv/entitlements:/app
        command: /bin/bash -c "cd /app && pip install -r requirements.txt && python api.py"
    rbac:
        container_name: rbac
        image: python:3
        build:
            context: srv/rbac
        volumes:
            - ./srv/rbac:/app
        command: /bin/bash -c "cd /app && pip install -r requirements.txt && python api.py"
    aafrontend:
        container_name: aafrontend
        image: node:10.22.0
        user: node
        ports:
            - 8002:8002
        environment:
            DEBUG: '*:*'
        command: /bin/bash -c "cd /app && npm install && npm run start:container"
        volumes:
            - ./srv/tower-analytics-frontend:/app
    fastapi:
        build:
            context: ./srv/tower-analytics-backend
            dockerfile: ./Dockerfile
            args:
                SRC_MOUNT: /app
        image: tower_analytics_backend
        depends_on:
            - postgres
        volumes:
            - ./srv/tower-analytics-backend/:/app
        env_file:
            - ./srv/tower-analytics-backend/.envs/.local/.django
            - ./srv/tower-analytics-backend/.envs/.local/.postgres
        ports:
            - 8004:8080
        command: ./launcher
        environment:
            - ALLOW_DIRECT_BUNDLE_UPLOADS=yes
            - DEBUG=true
            - APP=fastapi
            - DEV=1
        container_name: fastapi
    postgres:
        build:
            context: ./srv/tower-analytics-backend
            dockerfile: ./compose/local/postgres/Dockerfile
        ports:
            - 15432:5432
        image: tower_analytics_backend_production_postgres
        volumes:
            - ./srv/tower-analytics-backend/local_postgres_data:/var/lib/postgresql/data
            - ./srv/tower-analytics-backend/local_postgres_data_backups:/backups
        env_file:
            - ./srv/tower-analytics-backend/.envs/.local/.postgres
        container_name: postgres
